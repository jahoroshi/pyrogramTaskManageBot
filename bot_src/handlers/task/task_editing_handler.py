import asyncio

import psycopg
from pyrogram.types import Message, CallbackQuery

import bot_src.keyboards as kb
from bot_src.handlers.task.base_task_handler import BaseTaskHandler
from bot_src.states.states import EditTask


class TaskEditingHandler(BaseTaskHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á."""

    async def edit_task(self, _, callback_query: CallbackQuery):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        data = callback_query.data
        user_id = callback_query.from_user.id
        task_id = int(data.split("_")[-1])
        if data.startswith("edit_task_name"):
            await self.state.set_state(user_id, EditTask.name)
            await self.state.set_data(user_id, {"task_id": task_id})
            await callback_query.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        elif data.startswith("edit_task_disc"):
            await self.state.set_state(user_id, EditTask.description)
            await self.state.set_data(user_id, {"task_id": task_id})
            await callback_query.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        elif data.startswith("edit_task"):
            await callback_query.edit_message_reply_markup(
                reply_markup=kb.task_edit_name_discr(task_id)
            )

    async def edit_task_handler(self, _, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏."""
        text = message.text
        user_id = message.from_user.id
        data = await self.state.get_data(user_id)
        if data:
            task_id = data.get("task_id")
        else:
            await message.reply("–£ –Ω–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        cur_state = await self.state.get_state(user_id)
        field = "name" if cur_state == EditTask.name else "description"
        query = f"UPDATE tasks SET {field} = %s WHERE user_id = %s AND task_id = %s RETURNING task_id, name, description, is_completed"
        try:
            response = await self.db.execute(query, (text, user_id, task_id))
        except psycopg.Error:
            await message.reply("–ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            await asyncio.sleep(1)
            await message.delete()
        else:
            if response and (res := response[0]):
                status = "‚úÖ" if res.get("is_completed") else "‚è∞"
                keyboard = kb.task_menu(res.get("task_id"), res.get("is_completed"))
                text = (
                    f"{status} **{res.get('name')}**\n"
                    f"```–û–ø–∏—Å–∞–Ω–∏–µ:\n{res.get('description')}```"
                )
                await message.reply(
                    "üéâ __–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞__", reply_markup=kb.main_menu()
                )
                await self.state.clear(user_id)
                await asyncio.sleep(0.7)
                await message.reply(text, reply_markup=keyboard)

    async def back_to_taskmenu(self, _, callback_query: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏."""
        data = callback_query.data
        user_id = callback_query.from_user.id
        task_id = int(data.split("_")[-1])
        try:
            task = await self._get_task(user_id, task_id)
        except psycopg.Error:
            await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        await callback_query.edit_message_reply_markup(
            reply_markup=kb.task_menu(task_id, task.is_completed)
        )
