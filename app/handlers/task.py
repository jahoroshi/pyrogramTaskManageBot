import asyncio
import time
from typing import List, Dict

import psycopg
from pyrogram.types import Message, CallbackQuery

import app.keyboards as kb
from app.database import Database
from app.models import Task
from app.states import state
from app.states.fsm import FSMContext
from app.states.states import CreateTask, EditTask


class TaskHandler:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–¥–∞—á"""

    def __init__(self, state: FSMContext, database: Database) -> None:
        self.state: FSMContext = state
        self.db: Database = database

    async def create_task(self, _, message: Message) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        user_id = message.from_user.id
        await self.state.set_state(user_id, CreateTask.name)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

    async def handle_task_creation(self, _, message: Message) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        user_id = message.from_user.id
        state = await self.state.get_state(user_id)
        if state and state == "CreateTask.name":
            await self.state.set_state(user_id, CreateTask.description)
            await self.state.set_data(user_id, {"name": message.text})
            await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        elif state and state == "CreateTask.description":
            user_data: dict = await self.state.get_data(user_id)
            name: str = user_data.get("name")
            description: str = message.text
            query = "INSERT INTO tasks (user_id, name, description) VALUES (%s, %s, %s)"
            data = (user_id, name, description)
            try:
                await self.db.execute(query, data)
            except psycopg.Error:
                await message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            else:
                await message.reply(
                    "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb.main_menu()
                )

            await self.state.clear(user_id)

    async def list_tasks(self, _, message: Message) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id: int = message.from_user.id
        tasks: List[Task] = await self._get_tasks(user_id)
        if not tasks:
            await message.reply("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç")
        else:
            for task in tasks:
                status: str = "‚úÖ" if task.is_completed else "‚è∞"
                keyboard = kb.task_menu(task.task_id, task.is_completed)
                text = (
                    f"{status} **{task.name}**"
                    f"```–û–ø–∏—Å–∞–Ω–∏–µ:\n"
                    f"{task.description}\n"
                    f"```"
                )
                await message.reply(text, reply_markup=keyboard)

    async def handle_status(self, _, callback_query: CallbackQuery) -> None:
        """
        –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏
        """
        data: str = callback_query.data
        user_id: int = callback_query.from_user.id
        task_id: int = int(data.split('_')[1])
        query = "UPDATE tasks SET is_completed = NOT is_completed WHERE task_id = %s AND user_id = %s RETURNING is_completed"
        params = (task_id, user_id)

        try:
            response = await self.db.execute(query, params)
        except psycopg.Error:
            await callback_query.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        else:

            # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏ –∏ —Ç–µ–∫—Ç—Å —Ç–∞–∫—Å–∫–∏
            if response and (r := response[0]) and r.get('is_completed'):
                await callback_query.answer('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')
                await asyncio.sleep(1.5)
                await callback_query.message.delete()
            elif response and (r := response[0]) and r.get('is_completed') is False:
                await callback_query.answer('–ó–∞–¥–∞—á–∞ –≤–Ω–æ–≤—å –∞–∫—Ç–∏–≤–Ω–∞!')
                task = await self._get_task(user_id, task_id)
                text = (
                    f"‚è∞ **{task.name}**"
                    f"```–û–ø–∏—Å–∞–Ω–∏–µ:\n"
                    f"{task.description}\n"
                    f"```"
                )

                await callback_query.edit_message_text(text, reply_markup=kb.task_menu(task_id, False))


    async def delete_task(self, _, callback_query: CallbackQuery) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É"""
        data: str = callback_query.data
        task_id: int = int(data.split('_')[1])
        user_id: int = callback_query.from_user.id
        query = "DELETE FROM tasks WHERE task_id = %s AND user_id = %s"
        try:
            await self.db.execute(query, (task_id, user_id))
        except psycopg.Error:
            await callback_query.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.')
        else:
            await callback_query.answer('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.')
            await asyncio.sleep(1.5)
            await callback_query.message.delete()


    async def _get_tasks(self, user_id: int) -> List[Task]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
        query = "SELECT task_id, user_id, name, description, is_completed FROM tasks WHERE user_id = %s"
        tasks = await self.db.execute(query, (user_id,))
        return [Task(**el) for el in tasks]


    async def _get_task(self, user_id: int, task_id) -> Task:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É"""
        query = "SELECT task_id, user_id, name, description, is_completed FROM tasks WHERE user_id = %s AND task_id = %s"
        task = await self.db.get_one(query, (user_id, task_id))
        return Task(**task)

    async def edit_task(self, _, callback_query: CallbackQuery):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞–∂–∞—Ç–æ–π inline-–∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞–≤–∏—Ç—Å—è FMS —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        :param _:
        :param callback_query:
        :return:
        """
        data = callback_query.data
        user_id = callback_query.from_user.id
        task_id = int(data.split('_')[-1])
        if data.startswith('edit_task_name'):
            await state.set_state(user_id, EditTask.name)
            await state.set_data(user_id, {'task_id': task_id})
            await callback_query.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:')
        elif data.startswith('edit_task_disc'):
            await state.set_state(user_id, EditTask.description)
            await state.set_data(user_id, {'task_id': task_id})
            await callback_query.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:')
        elif data.startswith('edit_task'):
            await callback_query.edit_message_reply_markup(reply_markup=kb.task_edit_name_discr(task_id))

    async def edit_task_handler(self, client, message: Message):
        """
        –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ FSM –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∏—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
        """
        text = message.text
        user_id = message.from_user.id
        data = await state.get_data(user_id)

        if data:
            task_id = data.get('task_id')
        else:
            await message.reply('–£ –Ω–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return

        cur_state = await state.get_state(user_id)

        # –í—ã–±–∏—Ä–∞–µ—Ç –∫–∞–∫–æ–µ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Å—Ç–∏–≤–∏–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö FSM
        field = 'name' if cur_state == EditTask.name else 'description'
        query = f"UPDATE tasks SET {field} = %s WHERE user_id = %s AND task_id = %s RETURNING task_id, name, description, is_completed"
        try:
            response = await self.db.execute(query, (text, user_id, task_id))
        except psycopg.Error:
            await message.reply(f'–ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
            await asyncio.sleep(1)
            await message.delete()
        else:
            if response and (res := response[0]) and isinstance(res, dict):
                status: str = "‚úÖ" if res.get('is_completed') else "‚è∞"
                keyboard = kb.task_menu(res.get('task_id'), res.get('is_completed'))
                text = (
                    "üéâ __–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞__\n"
                    f"{status} **{res.get('name')}**"
                    f"```–û–ø–∏—Å–∞–Ω–∏–µ:\n"
                    f"{res.get('description')}\n"
                    f"```"
                )

                await message.reply(text, reply_markup=keyboard)



